/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.metriport.api.resources.devices;

import com.fasterxml.jackson.core.type.TypeReference;
import com.metriport.api.core.ApiError;
import com.metriport.api.core.ClientOptions;
import com.metriport.api.core.ObjectMappers;
import com.metriport.api.core.RequestOptions;
import com.metriport.api.core.Suppliers;
import com.metriport.api.resources.devices.connect.ConnectClient;
import com.metriport.api.resources.devices.requests.GetActivityDataRequest;
import com.metriport.api.resources.devices.requests.GetBiometricsDataRequest;
import com.metriport.api.resources.devices.requests.GetBodyDataRequest;
import com.metriport.api.resources.devices.requests.GetNutritionDataRequest;
import com.metriport.api.resources.devices.requests.GetSleepDataRequest;
import com.metriport.api.resources.devices.requests.GetUserDataRequest;
import com.metriport.api.resources.devices.types.Activity;
import com.metriport.api.resources.devices.types.Biometrics;
import com.metriport.api.resources.devices.types.Body;
import com.metriport.api.resources.devices.types.ConnectedUserInfo;
import com.metriport.api.resources.devices.types.Nutrition;
import com.metriport.api.resources.devices.types.Sleep;
import com.metriport.api.resources.devices.types.User;
import com.metriport.api.resources.devices.users.UsersClient;
import java.io.IOException;
import java.util.List;
import java.util.function.Supplier;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;

public class DevicesClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<ConnectClient> connectClient;

    protected final Supplier<UsersClient> usersClient;

    public DevicesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.connectClient = Suppliers.memoize(() -> new ConnectClient(clientOptions));
        this.usersClient = Suppliers.memoize(() -> new UsersClient(clientOptions));
    }

    /**
     * Returns activity data from all of the specified users' connected providers.
     */
    public List<Activity> getActivityData(GetActivityDataRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("activity");
        httpUrl.addQueryParameter("userId", request.getUserId());
        httpUrl.addQueryParameter("date", request.getDate());
        httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<Activity>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns activity data from all of the specified users' connected providers.
     */
    public List<Activity> getActivityData(GetActivityDataRequest request) {
        return getActivityData(request, null);
    }

    /**
     * Returns biometrics data from all of the specified users' connected providers.
     */
    public List<Biometrics> getBiometricsData(GetBiometricsDataRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("biometrics");
        httpUrl.addQueryParameter("userId", request.getUserId());
        httpUrl.addQueryParameter("date", request.getDate());
        httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<Biometrics>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns biometrics data from all of the specified users' connected providers.
     */
    public List<Biometrics> getBiometricsData(GetBiometricsDataRequest request) {
        return getBiometricsData(request, null);
    }

    /**
     * Returns body data from all of the specified users' connected providers.
     */
    public List<Body> getBodyData(GetBodyDataRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("body");
        httpUrl.addQueryParameter("userId", request.getUserId());
        httpUrl.addQueryParameter("date", request.getDate());
        httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<Body>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns body data from all of the specified users' connected providers.
     */
    public List<Body> getBodyData(GetBodyDataRequest request) {
        return getBodyData(request, null);
    }

    /**
     * Returns nutrition data from all of the specified users' connected providers.
     */
    public List<Nutrition> getNutritionData(GetNutritionDataRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("nutrition");
        httpUrl.addQueryParameter("userId", request.getUserId());
        httpUrl.addQueryParameter("date", request.getDate());
        httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<Nutrition>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns nutrition data from all of the specified users' connected providers.
     */
    public List<Nutrition> getNutritionData(GetNutritionDataRequest request) {
        return getNutritionData(request, null);
    }

    /**
     * Returns sleep data from all of the specified users' connected providers.
     */
    public List<Sleep> getSleepData(GetSleepDataRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("sleep");
        httpUrl.addQueryParameter("userId", request.getUserId());
        httpUrl.addQueryParameter("date", request.getDate());
        httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<Sleep>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns sleep data from all of the specified users' connected providers.
     */
    public List<Sleep> getSleepData(GetSleepDataRequest request) {
        return getSleepData(request, null);
    }

    /**
     * Returns user info from all of the specified users' connected providers.
     */
    public List<User> getUserData(GetUserDataRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user");
        httpUrl.addQueryParameter("userId", request.getUserId());
        httpUrl.addQueryParameter("date", request.getDate());
        httpUrl.addQueryParameter("timezoneId", request.getTimezoneId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<User>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns user info from all of the specified users' connected providers.
     */
    public List<User> getUserData(GetUserDataRequest request) {
        return getUserData(request, null);
    }

    /**
     * Returns a list of users with their IDs and connected providers.
     */
    public List<ConnectedUserInfo> getConnectedUsers(RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), new TypeReference<List<ConnectedUserInfo>>() {});
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns a list of users with their IDs and connected providers.
     */
    public List<ConnectedUserInfo> getConnectedUsers() {
        return getConnectedUsers(null);
    }

    public ConnectClient connect() {
        return this.connectClient.get();
    }

    public UsersClient users() {
        return this.usersClient.get();
    }
}
