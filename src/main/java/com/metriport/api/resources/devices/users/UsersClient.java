/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.metriport.api.resources.devices.users;

import com.metriport.api.core.ApiError;
import com.metriport.api.core.ClientOptions;
import com.metriport.api.core.ObjectMappers;
import com.metriport.api.core.RequestOptions;
import com.metriport.api.resources.devices.users.requests.GetConnectTokenRequest;
import com.metriport.api.resources.devices.users.requests.GetMetriportUserIdRequest;
import com.metriport.api.resources.devices.users.requests.RevokeAccessToProviderRequest;
import com.metriport.api.resources.devices.users.types.ConnectTokenResponse;
import com.metriport.api.resources.devices.users.types.ConnectedProvidersResponse;
import com.metriport.api.resources.devices.users.types.DeleteUserResponse;
import com.metriport.api.resources.devices.users.types.MetriportUserIdResponse;
import com.metriport.api.resources.devices.users.types.RevokeAccessToProviderResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class UsersClient {
    protected final ClientOptions clientOptions;

    public UsersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * For your specified user ID, returns a Metriport user ID to be used in subsequent requests.
     */
    public MetriportUserIdResponse getMetriportUserId(
            GetMetriportUserIdRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user");
        httpUrl.addQueryParameter("appUserId", request.getAppUserId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), MetriportUserIdResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * For your specified user ID, returns a Metriport user ID to be used in subsequent requests.
     */
    public MetriportUserIdResponse getMetriportUserId(GetMetriportUserIdRequest request) {
        return getMetriportUserId(request, null);
    }

    /**
     * Returns a token to be used in a Metriport Connect session.
     */
    public ConnectTokenResponse getConnectToken(GetConnectTokenRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user")
                .addPathSegments("connect/token");
        httpUrl.addQueryParameter("userId", request.getUserId());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ConnectTokenResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns a token to be used in a Metriport Connect session.
     */
    public ConnectTokenResponse getConnectToken(GetConnectTokenRequest request) {
        return getConnectToken(request, null);
    }

    /**
     * Returns the specified user's connected providers.
     */
    public ConnectedProvidersResponse getConnectedProviders(String userId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user")
                .addPathSegment(userId)
                .addPathSegments("connected-providers")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ConnectedProvidersResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns the specified user's connected providers.
     */
    public ConnectedProvidersResponse getConnectedProviders(String userId) {
        return getConnectedProviders(userId, null);
    }

    /**
     * Revokes the access token for a given provider.
     */
    public RevokeAccessToProviderResponse revokeAccessToProvider(
            String userId, RevokeAccessToProviderRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user")
                .addPathSegment(userId)
                .addPathSegments("revoke");
        httpUrl.addQueryParameter("provider", request.getProvider());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), RevokeAccessToProviderResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Revokes the access token for a given provider.
     */
    public RevokeAccessToProviderResponse revokeAccessToProvider(String userId, RevokeAccessToProviderRequest request) {
        return revokeAccessToProvider(userId, request, null);
    }

    /**
     * Revokes access tokens for all providers and deletes the user.
     */
    public DeleteUserResponse delete(String userId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user")
                .addPathSegment(userId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), DeleteUserResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Revokes access tokens for all providers and deletes the user.
     */
    public DeleteUserResponse delete(String userId) {
        return delete(userId, null);
    }
}
