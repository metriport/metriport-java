/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.metriport.api.resources.medical.patient;

import com.metriport.api.core.ApiError;
import com.metriport.api.core.ClientOptions;
import com.metriport.api.core.ObjectMappers;
import com.metriport.api.core.RequestOptions;
import com.metriport.api.resources.medical.patient.requests.PatientCreate;
import com.metriport.api.resources.medical.patient.requests.PatientDelete;
import com.metriport.api.resources.medical.patient.requests.PatientList;
import com.metriport.api.resources.medical.patient.requests.PatientUpdate;
import com.metriport.api.resources.medical.patient.types.ListPatientsResponse;
import com.metriport.api.resources.medical.patient.types.Patient;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class PatientClient {
    protected final ClientOptions clientOptions;

    public PatientClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Creates a Patient in Metriport for the specified Facility where the patient is receiving care.
     * <p>The more demographic info you can provide about a Patient,
     * the higher chances Metriport will be able to find a match.
     * For example, nicknames, old addresses, multiple phone numbers,
     * a pre-marital last name, etc.</p>
     */
    public Patient create(PatientCreate request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("patient");
        httpUrl.addQueryParameter("facilityId", request.getFacilityId());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()),
                    MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Patient.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Creates a Patient in Metriport for the specified Facility where the patient is receiving care.
     * <p>The more demographic info you can provide about a Patient,
     * the higher chances Metriport will be able to find a match.
     * For example, nicknames, old addresses, multiple phone numbers,
     * a pre-marital last name, etc.</p>
     */
    public Patient create(PatientCreate request) {
        return create(request, null);
    }

    /**
     * Get a Patient
     */
    public Patient get(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("patient")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Patient.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Get a Patient
     */
    public Patient get(String id) {
        return get(id, null);
    }

    /**
     * Updates the specified Patient.
     */
    public Patient update(String id, PatientUpdate request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("patient")
                .addPathSegment(id);
        httpUrl.addQueryParameter("facilityId", request.getFacilityId());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()),
                    MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Patient.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Updates the specified Patient.
     */
    public Patient update(String id, PatientUpdate request) {
        return update(id, request, null);
    }

    /**
     * Lists all Patients receiving care at the specified Facility.
     */
    public ListPatientsResponse list() {
        return list(PatientList.builder().build());
    }

    /**
     * Lists all Patients receiving care at the specified Facility.
     */
    public ListPatientsResponse list(PatientList request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("patient");
        if (request.getFacilityId().isPresent()) {
            httpUrl.addQueryParameter("facilityId", request.getFacilityId().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ListPatientsResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Lists all Patients receiving care at the specified Facility.
     */
    public ListPatientsResponse list(PatientList request) {
        return list(request, null);
    }

    /**
     * Removes the specified Patient.
     */
    public void delete(String id) {
        delete(id, PatientDelete.builder().build());
    }

    /**
     * Removes the specified Patient.
     */
    public void delete(String id, PatientDelete request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("patient")
                .addPathSegment(id);
        if (request.getFacilityId().isPresent()) {
            httpUrl.addQueryParameter("facilityId", request.getFacilityId().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return;
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Removes the specified Patient.
     */
    public void delete(String id, PatientDelete request) {
        delete(id, request, null);
    }
}
