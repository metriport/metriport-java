/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.metriport.api.resources.medical.facility.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.metriport.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListFacilitiesResponse.Builder.class)
public final class ListFacilitiesResponse {
    private final List<Facility> facilities;

    private final Map<String, Object> additionalProperties;

    private ListFacilitiesResponse(List<Facility> facilities, Map<String, Object> additionalProperties) {
        this.facilities = facilities;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("facilities")
    public List<Facility> getFacilities() {
        return facilities;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListFacilitiesResponse && equalTo((ListFacilitiesResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListFacilitiesResponse other) {
        return facilities.equals(other.facilities);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.facilities);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Facility> facilities = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListFacilitiesResponse other) {
            facilities(other.getFacilities());
            return this;
        }

        @JsonSetter(value = "facilities", nulls = Nulls.SKIP)
        public Builder facilities(List<Facility> facilities) {
            this.facilities.clear();
            this.facilities.addAll(facilities);
            return this;
        }

        public Builder addFacilities(Facility facilities) {
            this.facilities.add(facilities);
            return this;
        }

        public Builder addAllFacilities(List<Facility> facilities) {
            this.facilities.addAll(facilities);
            return this;
        }

        public ListFacilitiesResponse build() {
            return new ListFacilitiesResponse(facilities, additionalProperties);
        }
    }
}
