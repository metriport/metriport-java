/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.metriport.api.resources.medical.document.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.metriport.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListDocumentsResponse.Builder.class)
public final class ListDocumentsResponse {
    private final List<DocumentReference> documents;

    private final Map<String, Object> additionalProperties;

    private ListDocumentsResponse(List<DocumentReference> documents, Map<String, Object> additionalProperties) {
        this.documents = documents;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("documents")
    public List<DocumentReference> getDocuments() {
        return documents;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListDocumentsResponse && equalTo((ListDocumentsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListDocumentsResponse other) {
        return documents.equals(other.documents);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.documents);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<DocumentReference> documents = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListDocumentsResponse other) {
            documents(other.getDocuments());
            return this;
        }

        @JsonSetter(value = "documents", nulls = Nulls.SKIP)
        public Builder documents(List<DocumentReference> documents) {
            this.documents.clear();
            this.documents.addAll(documents);
            return this;
        }

        public Builder addDocuments(DocumentReference documents) {
            this.documents.add(documents);
            return this;
        }

        public Builder addAllDocuments(List<DocumentReference> documents) {
            this.documents.addAll(documents);
            return this;
        }

        public ListDocumentsResponse build() {
            return new ListDocumentsResponse(documents, additionalProperties);
        }
    }
}
