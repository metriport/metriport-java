/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.metriport.api.resources.medical.organization.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.metriport.api.core.ObjectMappers;
import com.metriport.api.resources.commons.types.Address;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BaseOrganization.Builder.class)
public final class BaseOrganization implements IBaseOrganization {
    private final String name;

    private final OrgType type;

    private final Address location;

    private BaseOrganization(String name, OrgType type, Address location) {
        this.name = name;
        this.type = type;
        this.location = location;
    }

    /**
     * @return The name of your organization.
     * This is usually your legal corporate entity name -
     * for example <code>Metriport Inc.</code>.
     */
    @JsonProperty("name")
    @Override
    public String getName() {
        return name;
    }

    /**
     * @return The type of your organization.
     */
    @JsonProperty("type")
    @Override
    public OrgType getType() {
        return type;
    }

    @JsonProperty("location")
    @Override
    public Address getLocation() {
        return location;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BaseOrganization && equalTo((BaseOrganization) other);
    }

    private boolean equalTo(BaseOrganization other) {
        return name.equals(other.name) && type.equals(other.type) && location.equals(other.location);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.name, this.type, this.location);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        TypeStage name(String name);

        Builder from(BaseOrganization other);
    }

    public interface TypeStage {
        LocationStage type(OrgType type);
    }

    public interface LocationStage {
        _FinalStage location(Address location);
    }

    public interface _FinalStage {
        BaseOrganization build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, TypeStage, LocationStage, _FinalStage {
        private String name;

        private OrgType type;

        private Address location;

        private Builder() {}

        @Override
        public Builder from(BaseOrganization other) {
            name(other.getName());
            type(other.getType());
            location(other.getLocation());
            return this;
        }

        /**
         * <p>The name of your organization.
         * This is usually your legal corporate entity name -
         * for example <code>Metriport Inc.</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("name")
        public TypeStage name(String name) {
            this.name = name;
            return this;
        }

        /**
         * <p>The type of your organization.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("type")
        public LocationStage type(OrgType type) {
            this.type = type;
            return this;
        }

        @Override
        @JsonSetter("location")
        public _FinalStage location(Address location) {
            this.location = location;
            return this;
        }

        @Override
        public BaseOrganization build() {
            return new BaseOrganization(name, type, location);
        }
    }
}
